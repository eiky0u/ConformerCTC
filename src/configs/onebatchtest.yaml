defaults:
  - model: conformer
  - metrics: ctc
  - datasets: onebatchtest
  - dataloader: onebatchtest
  - transforms: onebatchtest
  - _self_
writer:
  _target_: src.logger.CometMLWriter
  project_name: "Conformer_CTC"
  workspace: null
  run_name: "onebatchtest"
  mode: "online"
  loss_names: ["loss"] # which losses to log (useful for multi-loss tasks, s.a. GANs)
  log_checkpoints: False # set to True if you want to log save_dir with checkpoints to W&B
  id_length: 32 # length of the run_id
optimizer:
  _target_: torch.optim.AdamW
  lr: 3e-4
lr_scheduler:
  _target_: torch.optim.lr_scheduler.StepLR
  gamma: 1
  step_size: 1
loss_function:
  _target_: src.loss.CTCLossWrapper
text_encoder:
  _target_: src.text_encoder.CTCBPETextEncoder
  pretrained_name: "openai/whisper-small"
  lowercase: False
  # add_prefix_space: False
trainer:
  log_step: 10
  n_epochs: 100
  epoch_len: 10
  device_tensors: ["spectrogram", "spectrogram_length", "text_encoded", "text_encoded_length"] # which tensors should be on device (ex. GPU)
  resume_from: null # null or path to the checkpoint dir with *.pth and config.yaml
  device: auto # device name or "auto"
  override: True # if True, will override the previous run with the same name
  monitor: "min val_WER_(Argmax)" # "off" or "max/min metric_name", i.e. our goal is to maximize/minimize metric
  save_period: 5 # checkpoint each save_period epochs in addition to the best epoch
  early_stop: ${trainer.n_epochs} # epochs for early stopping
  save_dir: "saved"
  seed: 1
